"""Abstract type representation of required fields require for conversion rights
types."""

# Autogenerated, do not edit.
# Copyright © 2023 FMR LLC
#
# Based on the Open Captable Format schema:
# Copyright © 2022 Open Cap Table Coalition (https://opencaptablecoalition.com) /
# Original File: https://github.com/Open-Cap-Table-Coalition/Open-Cap-Format-OCF/t
# ree/v1.0.0/schema/primitives/types/conversion_triggers/ConversionTrigger.schema.
# json

from pydantic import BaseModel
from pydantic import Field
from pyocf.enums.conversiontriggertype import ConversionTriggerType
from pyocf.types.conversion_rights.convertibleconversionright import (
    ConvertibleConversionRight,
)
from pyocf.types.conversion_rights.stockclassconversionright import (
    StockClassConversionRight,
)
from pyocf.types.conversion_rights.warrantconversionright import WarrantConversionRight
from typing import Annotated
from typing import Optional
from typing import Union


class ConversionTrigger(BaseModel):
    """Abstract type representation of required fields require for conversion rights
    types.
    """

    # When the trigger condition is met, is the conversion automatic, elective or
    # automatic with an elective right not to convert
    type: ConversionTriggerType
    # Id for this conversion trigger, unique within list of ConversionTriggers in
    # parent convertible issuance's `conversion_triggers` field.
    trigger_id: str
    # Human-friendly nickname to describe the conversion right
    nickname: Optional[str]
    # Long-form description of the trigger
    trigger_description: Optional[str]
    # When the conditions of the trigger are met, how does the convertible convert?
    conversion_right: Annotated[
        Union[
            ConvertibleConversionRight,
            WarrantConversionRight,
            StockClassConversionRight,
        ],
        Field(discriminator="type"),
    ]
