"""Type representation of a phone number"""

# Autogenerated, do not edit.
# Copyright © 2023 FMR LLC
#
# Based on the Open Captable Format schema:
# Copyright © 2022 Open Cap Table Coalition (https://opencaptablecoalition.com) /
# Original File: https://github.com/Open-Cap-Table-Coalition/Open-Cap-Format-
# OCF/tree/v1.0.0/schema/types/Phone.schema.json
from __future__ import annotations

import phonenumbers
from phonenumbers.phonenumberutil import NumberParseException
from pydantic import BaseModel
from pydantic import Field
from pyocf.enums.phonetype import PhoneType
from typing import Annotated, Any, Dict


class PhoneNumber(str):
    @classmethod
    def __modify_schema__(cls, field_schema: Dict[str, Any]) -> None:
        field_schema.update(type="string", examples="+971505555555")

    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v) -> PhoneNumber:
        if not isinstance(v, str):
            raise TypeError("string for PhoneNumber is required")

        try:
            number = phonenumbers.parse(v)
        except NumberParseException:
            raise ValueError("Not a phone number")

        if not phonenumbers.is_valid_number(number):
            raise ValueError("Invalid phone number")

        return cls(v)

    def __repr__(self):
        return f"PhoneNumber({super().__repr__()})"


class Phone(BaseModel):
    """Type representation of a phone number"""

    phone_type: Annotated[
        PhoneType,
        Field(description="Type of phone number (e.g. mobile, home or business)"),
    ]
    phone_number: Annotated[
        PhoneNumber,
        Field(
            description="A valid phone number string in ITU E.123 international notation (e.g. +123 123"
            "456 7890)"
        ),
    ]
